name: build

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ${{ matrix.host.image }}

    strategy:
      # Cancel all in-progress and queued jobs in the matrix if any job in the matrix fails
      fail-fast: true

      # Set up a matrix to run the different configurations:
      matrix:
        build_type: [Debug, RelWithDebInfo, Release, MinSizeRel]
        # image states
        # windows-2022: https://github.com/actions/runner-images/blob/main/images/windows/Windows2022-Readme.md
        host:
          # cl configurations
          - { cpp_compiler: cl,         c_compiler: cl,       image: windows-2022, generator: Visual Studio 17 2022 }

    steps:
      - name: checkout
        uses: actions/checkout@v3

      # Use this to set up an open ssh debugging session with CI
      # - name: Setup ssh session
      #   uses: lhotari/action-upterm@v1

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Restore Dependency Cache (FetchContent)
        uses: actions/cache@v4
        with:
          path: ${{ steps.strings.outputs.build-output-dir }}/_deps 
          key: ${{ matrix.host.image }}-${{ matrix.host.cpp_compiler }}-${{ matrix.build_type }}-${{ hashFiles('code/deps/CMakeLists.txt') }}

      - name: Restore Dependency Cache (vcpkg)
        uses: actions/cache@v4
        with:
          path: ${{ steps.strings.outputs.build-output-dir }}/vcpkg_installed 
          key: ${{ matrix.host.image }}-${{ matrix.host.cpp_compiler }}-${{ matrix.build_type }}-${{ hashFiles('vcpkg.json') }}

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake
          -S ${{ github.workspace }}
          -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}