#include "shaders/structures.fxh"

Texture2D       g_terrain;
SamplerState    g_terrain_sampler;

cbuffer PSConstants
{
    constants g_pconstants;
};

float compute_delta_uv(float3 pos, float3 eye, float4 bounds, float4 res)
{
    float eps = 0.001;
    float dist = length(pos - eye);
    float delta_world = eps * dist;
    float delta_uv = delta_world / (bounds.z - bounds.x);

    float threshold = 0.5 * res.z; // step must be at least half a texel
    return max(threshold, delta_uv);
}

float3 normal_at(float2 uv, float4 bounds, float delta_uv)
{
    // compute uv coords
    float2 east_uv  = uv + float2(delta_uv, 0);
    float2 west_uv  = uv - float2(delta_uv, 0);
    float2 north_uv = uv - float2(0, delta_uv);
    float2 south_uv = uv + float2(0, delta_uv);

    // sample elevation vlaues
    float east_z  = g_terrain.Sample(g_terrain_sampler, east_uv).r;
    float west_z  = g_terrain.Sample(g_terrain_sampler, west_uv).r;
    float north_z = g_terrain.Sample(g_terrain_sampler, north_uv).r;
    float south_z = g_terrain.Sample(g_terrain_sampler, south_uv).r;

    // compute normal vector
    float delta_world = delta_uv * (bounds.z - bounds.x);
    float3 normal = float3(west_z - east_z, south_z - north_z, 2.0 * delta_world);
    return normalize(normal);
}

float3 hillshade(float3 albedo, float3 light_dir, float ambient_intensity, float3 normal, float exaggeration)
{
    normal = normalize(float3(exaggeration * normal.xy, normal.z));
    float strength = 0.5 * (1.0 - dot(normal, light_dir));
    return (ambient_intensity + (1 - ambient_intensity) * strength) * albedo;
}

void main(in PSInput pixel_input, out PSOutput pixel_output)
{
    float delta_uv = compute_delta_uv(pixel_input.world_pos, g_pconstants.eye, g_pconstants.bounds, g_pconstants.terrain_resolution);
    float3 normal = normal_at(pixel_input.uv, g_pconstants.bounds, delta_uv);
    float3 shading = hillshade(g_pconstants.albedo.rgb, g_pconstants.light_dir, g_pconstants.ambient_intensity, normal, g_pconstants.exaggeration);
    pixel_output.color = float4(shading, 1.0);
}